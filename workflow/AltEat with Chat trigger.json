{
  "name": "AltEat with Chat trigger",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are a recipe chatbot AI agent that performs both intent classification and entity extraction in a single response.\n\nTASK: Analyze user messages and return structured JSON with classification and extracted entities.\n\nCLASSIFICATION CATEGORIES:\n1. \"substitute\" - User wants to substitute/replace an ingredient in a recipe\n2. \"suggest\" - User wants recipe suggestions based on available ingredients\n3. \"other\" - Message doesn't fit cooking/recipe context\n4. \"lookup\" - User wants recipe details, including ingredients and cooking method.\n5. \"context\" - User wants to know what the ingredient is by describing the ingredient's attributes\n\nENTITY EXTRACTION RULES:\n\nFor \"substitute\" classification:\n- Extract \"ingredient\": the ingredient to be replaced/substituted\n- Extract \"recipe\": the dish/recipe context where substitution is needed\n- Set \"ingredients\" and \"attributes\" to null\n\nFor \"suggest\" classification:\n- Extract \"ingredients\": array of available ingredients user mentions\n- Set \"ingredient\", \"recipe\", and \"attributes\" to null\n\nFor \"lookup\" classification:\n- Extract \"recipe\": the dish that the user wants to know the details of (ingredients + cooking method)\n- Set \"ingredient\", \"ingredients\", and \"attributes\" to null\n\nFor \"context\" classification:\n- Extract \"attributes\": the descriptive attributes of the ingredient the user is trying to identify, including taste, texture, color, and cooking method\n- Set \"ingredient\", \"recipe\", and \"ingredients\" to null\n\nFor \"other\" classification:\n- Set all entities to null\n\nRESPONSE FORMAT (MUST be valid JSON):\n{\n  \"classification\": \"substitute|suggest|other|lookup\",\n  \"entities\": {\n    \"ingredient\": \"string or null\",\n    \"recipe\": \"string or null\", \n    \"ingredients\": [\"array\", \"of\", \"strings\"] or null,\n    \"attributes\": {\n       \"taste\": \"string or null\",\n       \"texture\": \"string or null\",\n       \"color\": \"string or null\",\n       \"method\": \"string or null\"\n    }\n  },\n  \"confidence\": 0.0-1.0\n}\n\nCLASSIFICATION GUIDELINES:\n\nSUBSTITUTE indicators:\n- Keywords: \"substitute\", \"replace\", \"instead of\", \"alternative\", \"swap\", \"use instead\"\n- Patterns: \"X instead of Y\", \"replace X with\", \"substitute X in Y\"\n- Context: mentions specific ingredient + specific recipe/dish\n\nSUGGEST indicators:\n- Keywords: \"recipe\", \"make\", \"cook\", \"prepare\", \"what can I make\", \"suggestions\"\n- Patterns: \"I have X, Y, Z\", \"using these ingredients\", \"with chicken and rice\"\n- Context: lists available ingredients, asks for recipe ideas\n\nOTHER indicators:\n- Greetings, general questions, non-food related queries\n- Unclear or incomplete requests\n- Questions about cooking techniques without specific ingredients\n\nLOOKUP indicators:\n- Keywords: \"recipe for\", \"how to make\", \"ingredients of\", \"details of\"\n- Patterns: \"recipe for X\", \"how do I cook X\", \"I want to know more about X\", \"details for X\"\n- Context: mentions a recipe, asks for recipe details (ingredients and cooking method)\n\nCONTEXT indicators:\n- Keywords: \"kind of\", \"type of\", \"what is this ingredient\", \"donâ€™t know the name\", \"it tastes\", \"it looks like\", \"it feels\", \"used for cooking\", \"something that\"\n- Patterns: \"a [color] [food form]\" (e.g., a green leafy vegetable), \"something that tastes [taste]\" (e.g., something that tastes sour), \"a [texture] ingredient\" (e.g., a crunchy seed), \"an ingredient used for [cooking method]\" (e.g., used for baking cakes)\n- Context: user describes an ingredient by its attributes (taste, texture, color, cooking method), user does not know or provide the actual name of the ingredient, the request is essentially about identifying or clarifying an ingredient from descriptive clues\n\nENTITY EXTRACTION GUIDELINES:\n\nIngredient extraction:\n- Extract base ingredient names (e.g., \"eggs\" not \"2 eggs\")\n- Use singular or plural as mentioned by user\n- Common ingredients: eggs, butter, milk, flour, sugar, oil, etc.\n\nRecipe extraction:\n- Extract dish/recipe name (e.g., \"chocolate cake\", \"cookies\", \"pasta\")\n- Include cooking method if mentioned (e.g., \"baked chicken\", \"fried rice\")\n- Use general terms if specific recipe unclear (e.g., \"baking\", \"cooking\")\n\nIngredients list extraction:\n- Extract all mentioned food items as separate array elements\n- Clean up quantities and focus on ingredient names\n- Include proteins, vegetables, grains, dairy, etc.\n\nAttributes list extraction:\n- Extract descriptive attributes of an ingredient when the user does not provide its name\n- Capture details such as, taste (e.g., sour, sweet, salty, bitter, spicy), texture (e.g., crunchy, soft, chewy, creamy), color (e.g., red, green, yellow, brown), and cooking method (e.g., fried, grilled, baked)\n\nCONFIDENCE SCORING:\n- 0.9-1.0: Very clear intent with specific ingredients/recipes mentioned\n- 0.7-0.8: Clear intent but some ambiguity in entities\n- 0.5-0.6: Somewhat unclear intent or entities\n- 0.3-0.4: Ambiguous message, best guess classification\n- 0.0-0.2: Very unclear or nonsensical input\n\nEXAMPLES:\n\nInput: \"I need to substitute eggs in my chocolate cake recipe\"\nOutput: {\"classification\": \"substitute\", \"entities\": {\"ingredient\": \"eggs\", \"recipe\": \"chocolate cake\", \"ingredients\": null, \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}}, \"confidence\": 0.95}\n\nInput: \"Can I replace butter with oil in cookies?\"\nOutput: {\"classification\": \"substitute\", \"entities\": {\"ingredient\": \"butter\", \"recipe\": \"cookies\", \"ingredients\": null}, \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}, \"confidence\": 0.9}\n\nInput: \"I have chicken, rice, and broccoli. What can I make?\"\nOutput: {\"classification\": \"suggest\", \"entities\": {\"ingredient\": null, \"recipe\": null, \"ingredients\": [\"chicken\", \"rice\", \"broccoli\"]}, \"confidence\": 0.95}\n\nInput: \"What recipes can I make with tomatoes and pasta?\"\nOutput: {\"classification\": \"suggest\", \"entities\": {\"ingredient\": null, \"recipe\": null, \"ingredients\": [\"tomatoes\", \"pasta\"], \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}}, \"confidence\": 0.9}\n\nInput: \"Hello, how are you today?\"\nOutput: {\"classification\": \"other\", \"entities\": {\"ingredient\": null, \"recipe\": null, \"ingredients\": null, \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}}, \"confidence\": 0.8}\n\nInput: \"What's the weather like?\"\nOutput: {\"classification\": \"other\", \"entities\": {\"ingredient\": null, \"recipe\": null, \"ingredients\": null, \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}}, \"confidence\": 0.9}\n\nInput: \"substitute something in cake\"\nOutput: {\"classification\": \"substitute\", \"entities\": {\"ingredient\": \"unknown ingredient\", \"recipe\": \"cake\", \"ingredients\": null, \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}}, \"confidence\": 0.4}\n\nInput: \"how do I make spaghetti?\"\nOutput: {\"classification\": \"lookup\", \"entities\": {\"ingredient\": null, \"recipe\": \"spaghetti\", \"ingredients\": null, \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}}, \"confidence\": 0.9}\n\nInput: \"details for apple pie\"\nOutput: {\"classification\": \"lookup\", \"entities\": {\"ingredient\": null, \"recipe\": \"apple pie\", \"ingredients\": null, \"attributes\": {\"taste\": null, \"texture\": null, \"color\": null, \"method\": null}}, \"confidence\": 0.8}\n\nInput: \"I'm looking for a yellow fruit that tastes sour\"\nOutput: {\"classification\": \"context\", \"entities\": {\"ingredient\": null, \"recipe\": null, \"ingredients\": null, \"attributes\": {\"taste\": \"sour\", \"texture\": null, \"color\": \"yellow\", \"method\": null}}, \"confidence\": 0.8}\n\nInput: \"i want a green vegetable that is crunchy and slightly bitter\"\nOutput: {\"classification\": \"context\", \"entities\": {\"ingredient\": null, \"recipe\": null, \"ingredients\": null, \"attributes\": {\"taste\": \"bitter\", \"texture\": \"crunchy\", \"color\": \"green\", \"method\": null}}, \"confidence\": 0.9}\n\nInput: \"i want something that is tender and usually grilled\"\nOutput: {\"classification\": \"context\", \"entities\": {\"ingredient\": null, \"recipe\": null, \"ingredients\": null, \"attributes\": {\"taste\": null, \"texture\": \"tender\", \"color\": null, \"method\": \"grilled\"}}, \"confidence\": 0.85}\n\nIMPORTANT:\n- Always respond with valid JSON only\n- Never include explanations outside the JSON\n- Return JSON in a single line without newlines or extra formatting\n- If unsure about entities, use descriptive placeholders\n- Maintain consistent confidence scoring\n- Handle typos and informal language gracefully\n\nFORMAT REQUIREMENT: Return JSON like this:\n{\"classification\": \"substitute\", \"entities\": {\"ingredient\": \"eggs\", \"recipe\": \"pancake\", \"ingredients\": null\", attributes\": {\"taste\": null, \"texture\": null\", \"color\": null, \"method\": null}}, \"confidence\": 0.95}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        144,
        -32
      ],
      "id": "1ef333ff-8130-45da-a55a-6b02a70e628b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        128,
        160
      ],
      "id": "b5c9b0d7-f331-4202-8758-a81d42edbcf9",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "YA2d5vv1CudXZas8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.classification }}",
                    "rightValue": "substitute",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c8a30a86-a54c-42a5-950b-d911dbe1f050"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "289ffc8a-6528-43e0-8ef7-f8b9bafd6595",
                    "leftValue": "={{ $json.classification }}",
                    "rightValue": "suggest",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "903f7429-fb1b-4967-ad21-02fd0ffd8548",
                    "leftValue": "={{ $json.classification }}",
                    "rightValue": "other",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        848,
        -48
      ],
      "id": "7aed1cb7-575b-490d-963d-9431e2227753",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// Get the AI response\nconst aiResponse = $('AI Agent').first().json.output;\nconst aiR = $(\"AI Agent\").all();\nconsole.log(aiR)\n\ntry {\n  // Parse the JSON response\n  const parsedResponse = JSON.parse(aiResponse);\n  \n  // Validate structure\n  const result = {\n    classification: parsedResponse.classification || \"other\",\n    entities: {\n      ingredient: parsedResponse.entities?.ingredient || null,\n      recipe: parsedResponse.entities?.recipe || null,\n      ingredients: parsedResponse.entities?.ingredients || null\n    },\n    confidence: parsedResponse.confidence || 0.0\n  };\n  \n  return { json: result };\n  \n} catch (error) {\n  // Fallback if JSON parsing fails\n  return { \n    json: {\n      classification: \"other\",\n      entities: {\n        ingredient: null,\n        recipe: null,\n        ingredients: null\n      },\n      confidence: 0.0,\n      error: \"Failed to parse AI response\"\n    }\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        -32
      ],
      "id": "b5ce93d2-40b3-4d48-b3be-7e28fd0bc975",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -160,
        -32
      ],
      "id": "6dd675eb-aedc-4129-89b0-a6be6886ddca",
      "name": "When chat message received",
      "webhookId": "f5e289b6-4914-4c86-ade9-b5a99970a807",
      "executeOnce": false,
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        272,
        224
      ],
      "id": "5f4d4a4d-fe19-4154-9e19-6857b8db4802",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1712,
        80
      ],
      "id": "d1e9a535-9ae5-4e40-b2bc-baaa57c9b6c5",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"success\": true,\n  \"type\": \"recipe_suggestions\",\n  \"recipes\": {{ $json.recipes }}\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1504,
        80
      ],
      "id": "7e33afbb-1842-4f31-8a3c-469a6278175a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"success\": true,\n  \"type\": \"ingredient_substitutes\",\n  \"substitutes\": {{ $json.substitutes }}\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1504,
        -144
      ],
      "id": "7cae6d28-d235-4b84-a921-c0994fdf492e",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1712,
        -144
      ],
      "id": "badff0ca-cc76-4a67-bb58-13f80287029d",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1264,
        448
      ],
      "id": "b10b2944-f448-4ec6-8023-61533ce48abf",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1680,
        464
      ],
      "id": "d3c6d3c0-5f35-4dfe-abeb-02b89ddd94fd",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1248,
        640
      ],
      "id": "0ddf639e-8ab4-4ca8-bd61-9aebd78a6d6d",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "YA2d5vv1CudXZas8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://0.0.0.0:8080/suggest",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=ingredients",
              "value": "={{ $json.entities.ingredients }}"
            },
            {
              "name": "session_id",
              "value": "={{ $('When chat message received').item.json.sessionId }}"
            },
            {
              "name": "message_id",
              "value": "={{ $('When chat message received').item.json.messageId }}"
            },
            {
              "name": "user_message",
              "value": "={{ $('When chat message received').item.json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1296,
        80
      ],
      "id": "fd523762-b0fb-4b23-9d01-135c8e2aaf39",
      "name": "Suggestion"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://0.0.0.0:8080/substitute",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=ingredient",
              "value": "={{ $json.entities.ingredient }}"
            },
            {
              "name": "recipe",
              "value": "={{ $json.entities.recipe }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1296,
        -144
      ],
      "id": "920149c4-d1de-44c7-8492-d729dbd0d9f7",
      "name": "Substitution"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "work with supabase",
        "tableName": {
          "__rl": true,
          "value": "chat_sessions",
          "mode": "list",
          "cachedResultName": "chat_sessions"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        432,
        192
      ],
      "id": "68eec6a3-1160-4824-8dae-f70fd2f59dc4",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "skEdxjX39e3zKXpz",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        528,
        416
      ],
      "id": "1aacce99-5055-4341-a94d-8233a873e22a",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "YA2d5vv1CudXZas8",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "chat_sessions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $json.sessionId }}"
            },
            {
              "fieldId": "user_id",
              "fieldValue": "2"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        192,
        -288
      ],
      "id": "a7bc72e4-f411-4c6d-9a55-03b3e04e6d68",
      "name": "Create a row",
      "credentials": {
        "supabaseApi": {
          "id": "skEdxjX39e3zKXpz",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {
    "When chat message received": [
      {
        "json": {
          "chatInput": "What can I cook with chicken and garlic?",
          "sessionId": "1761418535283eud6zztnr",
          "messageId": "1761419683029c57ksuk56"
        }
      }
    ]
  },
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Substitution",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Suggestion",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Suggestion": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Substitution": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "timezone": "Asia/Bangkok"
  },
  "versionId": "29d7082b-134e-4461-90cf-1e92fc0a180a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6c631d09f825f2fe5e4b70a73071b02bb9811aec448ba809d5eace2fe5043e2b"
  },
  "id": "JAtc0msHcfldm5SB",
  "tags": []
}